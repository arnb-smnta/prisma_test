// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}// we can have multiple generator

datasource db {
  provider = "postgresql"//name of the database
  url      = env("DATABASE_URL")//url of the database
}
//We can only have one datasource in here because prisma is directly connecting to the database through this


model User {
  id String @id @default(uuid())// this are all field level attribute
  name String
  email String @unique
  age Int
  role Role @default(BASIC)
  writtenPosts Post[] @relation("WrittenPosts")
  favouritePosts Post[] @relation("FavouritePosts")
  userPreference UserPreference? @relation(fields: [userPreferenceId],references: [id])
  userPreferenceId String?       @unique

  // @@unique([age,name]) this are all block level attribute it is specifying that a single use can not have same name and age simultaneously
@@index([email]) // index by email this is gonna help in finding
}


model Post {
id String @id @default(uuid())
title String
averageRating Float
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
author User @relation("WrittenPosts",fields:[authorId],references:[id])
authorId String
categories Category[]
favoritedBy User?  @relation("FavouritePosts",fields:[favouritedById],references:[id])
favouritedById String?
//@@id([title,authorId])  This is also a block attribute we can have a unique id based on scalar required fileds of the model 

}

model UserPreference{
id String @id @default(uuid())
emailUpdates Boolean
user User?
}

//Predifned data type enum
enum Role{
  BASIC
  ADMIN
}

model Category {
  id String @id @default(uuid())
  name String @unique
  posts Post[]
}